main()
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
View(ingest_data)
main()
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
main()
#Modified CSV
write_data_to_csv(df)
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
clear
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
install.packages(c("dplyr","tidyr","ggplot2"))
df <- subset(df, select = -drop_cols[drop_cols %in% names(df)])
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
print(plot_data(df))
rlang::last_trace()
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
if (run_processing) {
message("Reading data ...")
df <- ingest_data(path = "data/data.csv")
message("Processing data ...")
df <- process_data(df)
message("Writing Processed data ...")
write_data_to_csv(df) # Write to CSV
} else {
message("Skipping processing, loading existing processing data...")
df <- ingest_data("data/processed_data.csv")
message("\n Plotting Data")
print(plot_data(df))
}
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
plot_data(df)
plot_data <- function(df) {
p <- ggplot(df, aes(x = Engine_Size_L, y = Sales_Volume, colour = model)) +
geom_point() +
labs(
title = "Engine_Size_L vs Sales_Volume",
x = "Engine Size (L)",
y = "Sales Volume"
) +
theme_minimal()
print(p)
}
message("\n Plotting Data")
plot_data(df)
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
print(plot_data(df))
ggplot(data = df, mapping = aes(
x = Engine_Size_L,
y = Sales_Volume
))
print(plot_data(df))
ggplot(data = df, mapping = aes(
x = Engine_Size_L,
y = Sales_Volume
))
ggplot(data = data, mapping = aes(
x = Engine_Size_L,
y = Sales_Volume
))
print(plot_data(df))
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
print(plot_data(df))
main(run_processing = FALSE)
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
print(plot_data(df))
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
main(run_processing = FALSE)
plot_data <- function(df) {
ggplot(data = df, mapping = aes(
x = Price_USD,
y = Sales_Volume
)) +
geom_point(color = "blue", size = 3) +
labs(
title = "Price (USD) vs Sales Volume",
x = "Price (USD)",
y = "Sales Volume"
) +
theme_minimal()
}
main(run_processing = FALSE)
summary(df)
main(run_processing = FALSE)
print(summary(df))
type(df)
class(df)
ingest_data <- function(path = "data/data.csv") {
if (!file.exists(path)) {
stop(paste("File not Found:", path))
}
return(data.frame(read.csv(path, header = TRUE, sep = ",")))
}
class(df)
}
main(run_processing = FALSE)
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
class(df)
df <- ingest_data("data/processed_data.csv")
df <- ingest_data("data/processed_data.csv")
class(df)
summary(df)
main(run_processing = FALSE)
#summary(df)
message("Plotting the scatterplots...")
print(plot_data(df))
plot_data <- function(df) {
ggplot(data = df, mapping = aes(
x = Price_USD,
y = Sales_Volume
)) +
geom_point(alpha = 0.1, color = "blue", size = 3) +
labs(
title = "Price (USD) vs Sales Volume",
x = "Price (USD)",
y = "Sales Volume"
) +
theme_minimal()
}
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
# summary(df)
message("Plotting the scatterplots...")
print(plot_data(df))
summary(df$Engine_Size_L)
summary(df$Sales_Volume)
plot_data <- function(df) {
ggplot(data = df, mapping = aes(
x = Price_USD,
y = Sales_Volume
)) +
geom_point(alpha = 0.1, color = "blue", size = 1) +
labs(
title = "Price (USD) vs Sales Volume",
x = "Price (USD)",
y = "Sales Volume"
) +
theme_minimal()
}
print(plot_data(df))
#print(plot_data(df))
nrows(df)
#print(plot_data(df))
nrow(df)
###Choosing subset for visualization
create_subset(df){
sample_df <- create_subset()
print(plot_data(sample_df))
sample_df <- create_subset(df)
print(plot_data(sample_df))
###Choosing subset for visualization
create_subset(df){
###Choosing subset for visualization
create_subset(df){
###Choosing subset for visualization
create_subset(df) {
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
### Choosing subset for visualization
create_subset <- function(df) {
set.seed(42)
sample_df <- df[sample(nrow(df), 10000), ]
return(sample_df)
}
sample_df <- create_subset(df)
print(plot_data(sample_df))
sample_df <- create_subset(df)
### Choosing subset for visualization
create_subset <- function(df) {
set.seed(42)
sample_df <- df[sample(nrow(df), 10000), ]
return(sample_df)
}
sample_df <- create_subset(df)
#sample_df <- create_subset(df)
#print(plot_data(sample_df))
nrow(df)
#sample_df <- create_subset(df)
#print(plot_data(sample_df))
nrow(df)
df <- ingest_data("data/processed_data.csv")
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
df <- ingest_data("data/processed_data.csv")
#sample_df <- create_subset(df)
#print(plot_data(sample_df))
nrow(df)
sample_df <- create_subset(df)
print(plot_data(sample_df))
sample_df <- create_subset(df)
print(plot_data(sample_df))
print(plot_data(sample_df))
nrow(sample_df)
### Choosing subset for visualization
create_subset <- function(df) {
set.seed(42)
sample_df <- df[sample(nrow(df), 5000), ]
return(sample_df)
}
sample_df <- create_subset(df)
print(plot_data(sample_df))
### Choosing subset for visualization
create_subset <- function(df) {
set.seed(42)
sample_df <- df[sample(nrow(df), 1000), ]
return(sample_df)
}
sample_df <- create_subset(df)
print(plot_data(sample_df))
source("~/UCF_Courses/Fall_2025/STA4164/Projects/Project_2/Project_2.R")
sample_df <- create_subset(df)
df <- ingest_data("data/processed_data.csv")
sample_df <- create_subset(df)
summary(sample_df)
summary(sample_df$Price_USD)
summary(sample_df$Sales_Volume)
plot_features(sample_df)
plot_histogram <- function(df, col, save_path = NULL) {
p <- ggplot(df, aes_string(x = col)) +
geom_histogram(fill = "blue", color = "black", alpha = 0.7) +
labs(
title = paste("Histogram of ", col),
x = col,
y = "Count"
) +
theme_minimal()
if (!is.null(save_path)) ggsave(filename = save_path, plot = p, width = 8, height = 4)
return(p)
}
# Master function for plotting
plot_features <- function(df) {
for (col in names(df)) {
if (is.numeric(df[[col]])) {
print(plot_histogram(df, col))
} else if (is.factor(df[[col]]) || is.character(df[[col]])) {}
}
}
plot_features(sample_df)
plot_box <- function(df, col, save_path = NULL) {
p <- ggplot(df, aes_string(y = col)) +
geom_boxplot(fill = "green", color = "black", alpha = 0.7) +
labs(title = paste("Box Plot of ", col), y = col) +
theme_minimal()
if (!is.null(save_path)) ggsave(filename = save_path, plot = p, width = 8, height = 4)
return(p)
}
# Master function for plotting
plot_features <- function(df) {
for (col in names(df)) {
if (is.numeric(df[[col]])) {
print(plot_histogram(df, col))
print(plot_box(df, col))
} else if (is.factor(df[[col]]) || is.character(df[[col]])) {}
}
}
plot_features(sample_df)
